"""
Django settings for inventoryAPI project.

Generated by 'django-admin startproject' using Django 3.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path
import os
import django_heroku
from decouple import config

# Load .env file using:
from dotenv import load_dotenv
load_dotenv()



# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# ==========================================================================for anzara
# SECRET_KEY = os.environ.get("SECRET_KEY")
# DEBUG = os.environ.get("DEBUG") == "True"

# # ==========================================================================for Azran / ELOR
SECRET_KEY = config('SECRET_KEY')
DEBUG = config('DEBUG', cast = bool)

ALLOWED_HOSTS = ['0.0.0.0', '127.0.0.1', 'localhost:3000','localhost:3001',
                 '18.138.226.159', 'ecommerce.anzaraltd.com', 'www.ecommerce.anzaraltd.com',
                 'erp.anzaraltd.com', 'www.erp.anzaraltd.com','https://nodeapi.anzarabd.com',
                 'erps.anzaraltd.com', 'www.erps.anzaraltd.com',
                 'www.nodeapi.anzarabd.com','nodeapi.anzarabd.com', 
                 'www.nodeapi.anzara.com','nodeapi.anzara.com', 
                 'web-production-459b.up.railway.app', 'https://web-production-459b.up.railway.app',
                 'azran.up.railway.app', 'https://azran.up.railway.app',
                 'erp.azranbd.com', 'https://erp.azranbd.com',
                 'elor.up.railway.app', 'https://azran.up.railway.app',
                 'erp.elorbd.com', 'https://erp.elorbd.com',
                 ]
# 13.214.140.19
# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    "rest_framework.authtoken",
    'django_admin_logs',
    'corsheaders',
    'django.contrib.sites',
    'contact',
    'product',
    'order',
    'accounting',
    'hrm',
    'userlog',
    'django_filters',
    'software_settings',
    'ecommerce',
    # notifications
    'notifications',
    'notifications_rest',
    # cleanup old files on new uploaded
    'django_cleanup',
    'storages',
    'image_optimizer',
]

SITE_ID = 1
OPTIMIZED_IMAGE_METHOD = 'pillow'

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',  # Token Authentication
        # 'rest_framework.authentication.BasicAuthentication',
        # 'rest_framework.authentication.SessionAuthentication',

    ],
    'DEFAULT_PERMISSION_CLASSES': [
        # 'rest_framework.permissions.IsAuthenticatedOrReadOnly'
        'rest_framework.permissions.IsAuthenticated'
    ],
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend'
    ]
}
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
]

ROOT_URLCONF = 'inventoryAPI.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'inventoryAPI.wsgi.application'




# sudo docker exec 0edbb149194a /usr/bin/mysqldump -u anzara --password=email@anzara anzara > backup.sql
# sed 's/\sDEFINER=`[^`]*`@`[^`]*`//g' -i *.sql

# ============================================================================for anzara
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.mysql',
#         'NAME': os.environ.get("DATABASE_NAME"),
#         'HOST': os.environ.get("DATABASE_HOST"),
#         'PORT': os.environ.get("DATABASE_PORT"),
#         'USER': os.environ.get("DATABASE_USER"),
#         'PASSWORD': os.environ.get("DATABASE_PASSWORD"),
#     }
# }

# # ============================================================================for Azran / ELOR
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': config('DATABASE_NAME'),
        'HOST': config("DATABASE_HOST"),
        'PORT': config("DATABASE_PORT"),
        'USER': config("DATABASE_USER"),
        'PASSWORD': config("DATABASE_PASSWORD"),
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Dhaka'

USE_I18N = True

USE_L10N = True

USE_TZ = True


DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL = 'contact.UserProfile'

# added by the admin


CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_CREDENTIALS = True


STATIC_URL = '/django_static/'
STATIC_ROOT = BASE_DIR / 'django_static'
MEDIA_URL = '/media/'

MEDIA_ROOT = os.path.join(BASE_DIR, "media")
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"


# Email
EMAIL_BACKEND = 'django.core.mail.backends.dummy.EmailBackend'
MAILER_EMAIL_BACKEND = EMAIL_BACKEND
EMAIL_HOST = 'mail.anzaraclothing.com'
EMAIL_HOST_USER = 'porotest@anzaraclothing.comm'
EMAIL_HOST_PASSWORD = 'retest@anzara111'
EMAIL_PORT = 465
EMAIL_USE_SSL = True
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER


# SMS configuration start
# http://smpp.revesms.com:7788/sendtext
# ============================================================================for anzara
# SMS_ENABLED = os.environ.get("SMS_ENABLED") == "True"  # to use for sending sms
# SMS_HOST_URL = 'http://smpp.revesms.com:7788/sendtext'
# SMS_SECRET_KEY = os.environ.get("SMS_SECRET_KEY"),
# SMS_API_KEY = os.environ.get("SMS_API_KEY"),
# SMS_API_SENDER_ID = os.environ.get("SMS_API_SENDER_ID"),
# SMS_CHANNEL = os.environ.get("SMS_CHANNEL"),
# SMS_DCS = os.environ.get("SMS_DCS"), 
# SMS_FLASH = os.environ.get("SMS_FLASH"),
# ============================================================================for Azran / ELOR
SMS_ENABLED = config('SMS_ENABLED', cast = bool)  # to use for sending sms
SMS_HOST_URL = config('SMS_HOST_URL'),
SMS_SECRET_KEY = config('SMS_SECRET_KEY'),
SMS_API_KEY = config('SMS_API_KEY'),
SMS_API_SENDER_ID = config('SMS_API_SENDER_ID'),
SMS_CHANNEL = config('SMS_CHANNEL'),
SMS_DCS = config('SMS_DCS'),  
SMS_FLASH = config('SMS_FLASH'),
# SMS configuration end


# S3 BUCKETS CONFIG start
# ============================================================================for Anzara
# AWS_ACCESS_KEY_ID = os.environ.get("AWS_ACCESS_KEY_ID")
# AWS_SECRET_ACCESS_KEY = os.environ.get("AWS_SECRET_ACCESS_KEY")
# AWS_STORAGE_BUCKET_NAME = os.environ.get("AWS_STORAGE_BUCKET_NAME")
# AWS_S3_CUSTOM_DOMAIN = '%s.s3.amazonaws.com' % AWS_STORAGE_BUCKET_NAME
# AWS_S3_OBJECT_PARAMETERS = {
#     'CacheControl': 'max-age=86400',
# }
# AWS_S3_FILE_OVERWRITE = False
# AWS_DEFAULT_ACL = None
# DEFAULT_FILE_STORAGE = os.environ.get("DEFAULT_FILE_STORAGE")
# STATICFILES_STORAGE = os.environ.get("STATICFILES_STORAGE")

# # ============================================================================for Azran / ELOR
AWS_ACCESS_KEY_ID = config("AWS_ACCESS_KEY_ID")
AWS_SECRET_ACCESS_KEY = config("AWS_SECRET_ACCESS_KEY")
AWS_STORAGE_BUCKET_NAME = config("AWS_STORAGE_BUCKET_NAME")
AWS_S3_CUSTOM_DOMAIN = '%s.s3.amazonaws.com' % AWS_STORAGE_BUCKET_NAME
AWS_S3_OBJECT_PARAMETERS = {
    'CacheControl': 'max-age=86400',
}
AWS_S3_FILE_OVERWRITE = False
AWS_DEFAULT_ACL = None
DEFAULT_FILE_STORAGE = config("DEFAULT_FILE_STORAGE")
STATICFILES_STORAGE = config("STATICFILES_STORAGE")
# S3 BUCKETS CONFIG end

# Accounting Codes Start
CASH = 100040
BANK = 100010002
ACCOUNTS_RECEIVABLE = 100010010
ACCOUNTS_PAYABLE = 200010011
SALES_DISCOUNT = 500080
VAT_PAYABLE = 200010010
SALES_REVENUE = 500020
COST_OF_GOOD_SOLD = 400020
INVENTORY_ASSETS = 1000100015
BANK_COMMISSION = 400010007
SALARY_PAYABLE = 200010012
ADVANCE_TO_SUPPLIERS = 100010003
ADVANCE_FROM_CUSTOMERS = 200010050
INVENTORY_DISCOUNT = 1000100017  # Purchase Discount
SALARY_EXPENSES = 400010003
STATED_CAPITAL = 300010
CGD_TRANSPORT_COST = 400020010
PETTY_CASH = 100010001
EXPENSE_FROM_PETTY_CASH = 400010021
EMPLOYEE_ADVANCE = 100010009
SALES_VAT = 400010019
# Accounting Codes End

BKASH_TRANSFER_ACCOUNT = 1031100052895


# CELERY_BROKER_URL = "redis://localhost:6379/1"
